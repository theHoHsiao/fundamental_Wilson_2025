metadata_query = "Nc == {Nc} & Nt == {Nt} & Ns == {Ns} & beta == {beta} & nF == {nF} & mF == {mF}"
dir_template = "Sp{Nc}b{beta}nF{nF}mF{mF}T{Nt}L{Ns}"
plot_styles = "styles/prd.mplstyle"
plot_filetype = "pdf"


include: "rules/gradient_flow.smk"
include: "rules/package.smk"
include: "rules/mpcac.smk"
include: "rules/mass.smk"
include: "rules/plaquette.smk"
include: "rules/combined_plots.smk"
include: "rules/spectrum_plots.smk"
include: "rules/spectrum_tables.smk"
include: "rules/extrapolation.smk"
include: "rules/csvs.smk"


h5_data = expand(
    "data_assets/{datafile}.h5",
    datafile=["correlators_wall", "correlators_smear", "flows", "hmc"],
)

topology_history_plots = [
    f"top_charge_history_{ensemble}"
    for ensemble in [
        "Sp4b6.7nAS3mAS-1.045T48L24",
        "Sp4b6.7nAS3mAS-1.067T54L36",
        "Sp4b6.8nAS3mAS-1.035T56L24",
        "Sp4b6.8nAS3mAS-1.046T54L36",
    ]
]
plots = expand(
    f"assets/plots/{{plot}}.{plot_filetype}",
    plot=[
        "mpcac_vs_m0",
        "plaquette_phasediagram",
        "w0_vs_mpcac",
        "w0_flow_Sp4b6.8nAS3mAS-1.043T54L32",
        *topology_history_plots,
        "mps_mv_vs_mpsL",
        "mpsmv_vs_mpcac_b6p7",
        "mpsfps_vs_mpcac_b6p7",
        "meson_masses_b6p7_m0",
        "meson_decay_b6p7_m0",
        "mmfps_vs_mpcac_b6p7",
        "m2v_vs_m2ps_GF_b6p7",
        "m2_all_con_sp4as",
        "meson_spectrum_con",
        "f2_con_sp4as",
        "mvfps_vs_m2ps_GF_F_vs_AS",
        "excited_vector_ratio",
        "w0vsmps2",
        "mfpsvsmps2",
        "gmor_b6p7",
        "chipt2",
        "deft1",
    ],
)
tables = expand(
    "assets/tables/{table}.tex",
    table=[
        "plaquette_table",
        "gflow_table",
        "nlo_coefficients_decay",
        "nlo_coefficients_mass",
        "wall_results1",
        "wall_results2",
        "wall_results_ratio",
        "smear_mass",
        "smear_decay",
        "chipt_table",
        "deft_table",
        "autocorr_table",
        "finite_volume_table",
    ],
)
definitions = expand(
    "assets/definitions/{definition}.tex",
    definition=[
        "gflow_incomplete_ensembles",
        "plaquette_phasediagram_betas",
        "spectrum_plots_target_beta",
        "chipt_ratio_indirect",
        "chipt_ratio_direct",
        "chipt_beta_values",
        "finite_volume_definitions",
        "heavy_ps_limit",
    ],
)
csv_data = expand(
    "data_assets/{csv}.csv",
    csv=["ensemble_data", "chipt_deft_data", "global_eft_data"],
)
external_data = expand(
    "external_data/{filename}",
    filename=["mv_fps_fund.csv", "meson_meta_fund.csv", "m2v_fit_pms.json"],
)

rule all:
    input:
        assets="assets/info.json",
        data_assets="data_assets/info.json",


rule provenance_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        h5_data=h5_data,
        plots=plots,
        tables=tables,
        definitions=definitions,
        ensemble_metadata="metadata/ensemble_metadata.csv",
        external_data=external_data,
    output:
        stamp="assets/info.json",
    conda:
        "envs/flow_analysis.yml"
    shell:
        "python -m {params.module} {input.h5_data} {input.plots} {input.tables} {input.definitions} {input.ensemble_metadata} {input.external_data} --output_file {output.stamp}"


rule data_provenance_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        h5_data=h5_data,
        csv_data=csv_data,
        ensemble_metadata="metadata/ensemble_metadata.csv",
        external_data=external_data,
    output:
        stamp="data_assets/info.json",
    conda:
        "envs/flow_analysis.yml"
    shell:
        "python -m {params.module} {input.h5_data} {input.csv_data} {input.ensemble_metadata} {input.external_data} --output_file {output.stamp}"
